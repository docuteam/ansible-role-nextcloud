---

# Read all apps shipped by Nextcloud itself
- name: Read shipped apps
  command: ./occ app:list --shipped=true --output=json
  args:
    chdir: "{{ nextcloud_installation_dir }}"
  become: true
  become_user: "{{ nextcloud_file_owner }}"
  register: nextcloud_shipped_apps
  changed_when: false

- name: Remove non-json text from command output
  set_fact:
    nextcloud_shipped_apps: >-
      {{
        nextcloud_shipped_apps.stdout[
          (nextcloud_shipped_apps.stdout.find('{')):
        ]
      }}

# Read all external apps which have been installed by in addition
- name: Read installed external apps
  command: ./occ app:list --shipped=false --output=json
  args:
    chdir: "{{ nextcloud_installation_dir }}"
  become: true
  become_user: "{{ nextcloud_file_owner }}"
  register: nextcloud_installed_apps
  changed_when: false

- name: Remove non-json text from command output
  set_fact:
    nextcloud_installed_apps: >-
      {{
        nextcloud_installed_apps.stdout[
          (nextcloud_installed_apps.stdout.find('{')):
        ]
      }}

# Remove all apps from the list of external apps which
# - is not in the configured list of apps
# - is in the configured list of apps but have their state set to "absent"
- name: Remove external apps
  command: php occ app:remove "{{ item }}"
  with_items: "{{ (nextcloud_installed_apps.enabled |
    combine(nextcloud_installed_apps.disabled)) }}"
  become_user: "{{ nextcloud_file_owner }}"
  args:
    chdir: "{{ nextcloud_installation_dir }}"
  register: result
  failed_when: result.stdout is not search('removed') or result is failed
  changed_when: result is not failed
  when: >-
    ((nextcloud_apps | selectattr('name', 'search', item) | list | first
    | default({'state':'absent'})).state | default('enabled')) == 'absent'

# Install all apps from the configured list which
# - are external apps (not in the shipped apps list) and
# - are not yet installed (not in the installed apps list) and
# - have their state not set to "absent"
- name: Install external apps
  command: php occ app:install "{{ item.name }}"
  with_items: "{{ nextcloud_apps }}"
  become_user: "{{ nextcloud_file_owner }}"
  args:
    chdir: "{{ nextcloud_installation_dir }}"
  register: result
  failed_when: result.stdout is not search('installed') or result is failed
  changed_when: result is not failed
  when: >-
    item.name not in (nextcloud_shipped_apps.enabled
    | combine(nextcloud_shipped_apps.disabled)) and
    item.name not in (nextcloud_installed_apps.enabled
    | combine(nextcloud_installed_apps.disabled)) and
    (item.state | default('enabled') != 'absent')

# Update list of available apps after installation and removal:
- name: Re-read installed external apps
  command: ./occ app:list --shipped=false --output=json
  args:
    chdir: "{{ nextcloud_installation_dir }}"
  become: true
  become_user: "{{ nextcloud_file_owner }}"
  register: nextcloud_installed_apps
  changed_when: false

- name: Remove non-json text from command output
  set_fact:
    nextcloud_installed_apps: >-
      {{
        nextcloud_installed_apps.stdout[
          (nextcloud_installed_apps.stdout.find('{')):
        ]
      }}

# Check and update all external apps
- name: Update external apps
  command: php occ app:update "{{ item }}"
  with_items: "{{ (nextcloud_installed_apps.enabled
    | combine(nextcloud_installed_apps.disabled)) }}"
  become_user: "{{ nextcloud_file_owner }}"
  args:
    chdir: "{{ nextcloud_installation_dir }}"
  register: result
  failed_when: result.stdout is search('not installed') or result is failed
  changed_when: result.stdout is search('updated') and result is not failed

# Enable all apps from the configured list which
# - are not yet enabled and
# - have their state set to "enabled"
- name: Enable apps
  command: ./occ app:enable "{{ item.name }}"
  args:
    chdir: "{{ nextcloud_installation_dir }}"
  become: true
  become_user: "{{ nextcloud_file_owner }}"
  with_items: "{{ nextcloud_apps }}"
  when: >-
    (item.state | default('enabled')) == 'enabled' and
    item.name not in
    (nextcloud_installed_apps.enabled | combine(nextcloud_shipped_apps.enabled))

# Disable all apps from the configured list which
# - are not yet disabled and
# - have their state set to "disabled"
- name: Disable apps
  command: ./occ app:disable "{{ item.name }}"
  args:
    chdir: "{{ nextcloud_installation_dir }}"
  become: true
  become_user: "{{ nextcloud_file_owner }}"
  with_items: "{{ nextcloud_apps }}"
  when: >-
    (item.state | default('enabled')) == 'disabled' and
    item.name not in
    (nextcloud_installed_apps.disabled | combine(nextcloud_shipped_apps.disabled))
